"use strict";const{execFile,exec,execFileSync,fork,spawn,spawnSync}=require("child_process"),util=require("util");async function executeFile(e,r,c){var{error:e,stdout:r,stderr:c}=await util.promisify(execFile)(e,r,c||{cwd:process.cwd()});return{error:e,stdout:r,stderr:c}}function executeFileSync(e,r,c){return execFileSync(e,r,c||{cwd:process.cwd()})}async function execute(e,r,c){const o=util.promisify(o);var{error:e,stdout:r,stderr:c}=await o(e,r,c||{cwd:process.cwd()});return{error:e,stdout:r,stderr:c}}function executeCommand(r,s,t){return new Promise((c,o)=>{var e=spawn(r,s,t||{cwd:process.cwd()},(e,r)=>{e?o(e):c(r)});e.stdout.on("data",e=>{console.error("ps stdout: "+e)}),e.stderr.on("data",e=>{console.error("ps stderr: "+e)}),e.on("close",e=>{0!==e&&console.log("ps process exited with code "+e)}),e.on("error",e=>{console.error("Failed to start subprocess.")})})}function executeCommandSync(e,r,c){return spawnSync(e,r,c||{cwd:process.cwd()})}function executeFork(e,r,c){fork(e,r,c||{cwd:process.cwd()}).on("error",e=>{})}function executeFork(e,r,c){exec(e,r,c||{cwd:process.cwd()},()=>{}).on("error",e=>{})}